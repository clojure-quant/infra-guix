{:paths ["script"]
 :tasks {:requires [guix
                    [babashka.tasks :as tasks]
                    [babashka.fs :as fs]]

         ; helper tasks
         sudo (guix/sudo *command-line-args*)
         guix (guix/guix)

         ; verbosity:
         ; 0 means that no output is produced
         ; 1 is for quiet output
         ; 2 is similar to 1 but it additionally displays download URLs
         ; 3 shows all the build log output on standard error.

        ; CHANNELS
         channels-install {:doc "installs channels"
                           :task (guix/pull "channels" ;"--allow-downgrades"
                                            )}

         channels-install-home {:doc "installs channels"
                                :task (guix/pull "channels-home" ;"--allow-downgrades"
                                                 )}

         export-channels (guix/guix "package" "--export-channels")




         ; guix maintenance
         gc {:doc "guix garbage collect"
             :task (do (println "guix garbage collect..")
                       (guix/guix "gc" "--optimize" "-d" "2m")
                       (guix/guix "gc" "-F" "200G"))}

         pull {:doc "guix pull (update package definitions)"
               :task  (do
                        (println "guix pull...  ")
                        (shell "guix"
                                "pull" 
                                "--channels=./channels.scm"
                                "--verbosity=3"
                                "--max-silent-time=10000"  ; seconds
                                "--timeout=10000" ; seconds
                                ;"--substitute-urls=\"https://ci.guix.gnu.org\""
                               ; https://bordeaux.guix.gnu.org
                                      ; https://substitutes.nonguix.org
                                   ))}
         upgrade {:doc "guix upgrade installed packages"
                  :task (do (println "guix upgrade packages..")
                            (guix/guix "upgrade"))}

         update {:doc "Updates guix (gc pull upgrade)" ; ensure sequential order 
                 :task (do ;(run 'gc)
                         (run 'pull)
                         (run 'upgrade))}

         update-root {:doc "updates guix ROOT (gc pull upgrade)"
                      :task (do (guix/sudo "update")
                                (guix/guix "system" "describe"))}


         ; installer
         installer-build {:doc "builds installer vm-image to be run with qemu"
                          :task (let [_ (println "building ocean vm image..")
                                      ; guix system disk-image -t qcow2 config.scm' .
                                      r (guix/image-result "installer"
                                                           "--verbosity=3"
                                                           "--no-grafts")
                                      r-out (:out r)
                                      img (clojure.string/trim r-out)]
                                    ; "qemu-img convert -c -f raw -O qcow2 /gnu/store/r4kzcncfvr8l7j9rmmigja73jlhsic6b-disk-image  /tmp/server.qcow2"
                                  (println "installer image result: ]" img "[ ")
                                  (shell "sync")
                                  (shell "qemu-img convert"
                                         "-c"
                                         "-f" "raw"
                                         "-O" "qcow2"
                                         img
                                         "artefact/installer.qcow2")
                                  (println "generated image: artefact/installer.qcow2")
                                  (println "you might want to upload it to: https://cloud.digitalocean.com/images/custom_images")
                                  (println "region has to match the region where you deploy to"))}

         installer-run {:doc "run installer vm-image"
                        :task (shell "qemu-system-x86_64"
                                     "-enable-kvm" ; enable hardware virtual machine support (KVM) - run faster
                                     "-m" "2048"
                                     "-vga" "virtio"
                                     ; network
                                     "-netdev" "user,id=vnet,hostfwd=tcp::10022-:22" ; ,smb=/home/florian/Downloads
                                     "-device" "virtio-net-pci,netdev=vnet"
                                     ; file share
                                     "-virtfs" "local,path=/home/florian/Downloads,mount_tag=bongo,security_model=none"
                                     ;harddisk 
                                     "-device" "virtio-blk,drive=myhd"
                                     "-drive" "if=none,file=./artefact/installer.qcow2,id=myhd")}

        ; NUC
         ; os reconfigure does not work with substitutes.
         ; use "./bootstrap/guix-os-install.sh nuc12" instead.
         nuc-os-reconfigure-user (guix/system "nuc"
                                              "reconfigure"
                                              ; use substututes from nongnu in upgrading (kernel does not need to be compiled)
                                              "--substitute-urls=\"https://ci.guix.gnu.org https://bordeaux.guix.gnu.org https://substitutes.nonguix.org\""
                                          ; "--allow-downgrades"
                                           ;"--no-grafts"
                                              )


         nuc-os-weather {:doc "substitute availability for nuc system packages"
                         :task (guix/guix "weather"
                                          "--display-missing"
                                    ; "-coverage"
                                          "--manifest=./manifest/nuc-system.scm")}

         nuc-os-reconfigure  {:doc "reconfigures guix os on machine nuc (runs as sudo)"
                              :task (do (guix/sudo "nuc-os-reconfigure-user")
                                        (guix/guix "system" "describe"))}




         ; VM TERMINAL

         build-vm {:doc "builds vm-image to be run with qemu"
                   :task (do (println "building vm image..")
                             (guix/system "vm-terminal"
                                          "vm"
                                          "--verbosity=3"
                                          "--no-grafts"))}

         ; OCEAN
         ocean-docker {:doc "builds docker image"
                       :task (let [_ (println "building ocean docker image..")
                                   r (guix/guix-result
                                      "pack"
                                      "--format=docker"
                                      "--verbosity=3"
                                      "--no-grafts"
                                      "--cores=4"
                                      "--save-provenance"
                                          ;  "--root=./artefact/docker-ocean.tar.gz"
                                          ;"--entry-point=bin/guile"
                                      "--manifest=./machine/ocean-docker.scm")
                                   r-out (:out r)
                                   img (clojure.string/trim r-out)]
                               (println "docker is loading docker image from tar.gz: " img)
                               (shell "docker" "load" "--input" img) ; image will have tag guix:latest
                               (println "tagging image: pinkgorilla:latest")
                               (shell "docker" "tag" "guix:latest" "ocean:latest"))}

         ocean-build {:doc "builds digital-ocean vm-image to be run with qemu"
                      :task (let [_ (println "building ocean vm image..")
                                  ; guix system disk-image -t qcow2 config.scm' .
                                  r (guix/image-result "ocean-image"
                                                       "--verbosity=3"
                                                       "--no-grafts")
                                  r-out (:out r)
                                  img (clojure.string/trim r-out)]
                                ; "qemu-img convert -c -f raw -O qcow2 /gnu/store/r4kzcncfvr8l7j9rmmigja73jlhsic6b-disk-image  /tmp/server.qcow2"
                              (println "ocean image result: ]" img "[ ")
                              (shell "sync")
                              (shell "qemu-img convert"
                                     "-c"
                                     "-f" "raw"
                                     "-O" "qcow2"
                                     img
                                     "artefact/ocean.qcow2")
                              (println "generated image: artefact/ocean.qcow2")
                              (println "you might want to upload it to: https://cloud.digitalocean.com/images/custom_images")
                              (println "region has to match the region where you deploy to"))}

         ocean-run {:doc "run digital-ocean vm-image (ssh port outside:10022)"
                    :task (shell "qemu-system-x86_64"
                                 "-enable-kvm" ; enable hardware virtual machine support (KVM) - run faster
                                 "-m" "2048"
                                 "-vga" "virtio"
                                ; network
                                 "-netdev" "user,id=vnet,hostfwd=tcp::10022-:22" ; ,smb=/home/florian/Downloads
                                 "-device" "virtio-net-pci,netdev=vnet"
                                ; file share
                                 "-virtfs" "local,path=/home/florian/Downloads,mount_tag=bongo,security_model=none"
                                ;harddisk 
                                 "-device" "virtio-blk,drive=myhd"
                                 "-drive" "if=none,file=./artefact/ocean.qcow2,id=myhd")}

         ; cloud.digitalocean.com
         ocean-ssh {:doc "ssh into digital ocean"
                    :task (shell "ssh quant.hoertlehner.com")}

         ocean-init {:doc "initializes ocean machine with extra files"
                     :task (do (shell "scp"
                                      "./bootstrap/trateg-repo.sh"
                                      "florian@quant.hoertlehner.com:/home/florian")
                               (shell "ssh"
                                      "florian@quant.hoertlehner.com"
                                      "/home/florian/trateg-repo.sh")
                               (shell "scp"
                                      "/home/florian/repo/myLinux/data/trateg/creds.edn"
                                      "florian@quant.hoertlehner.com:/home/shared/repo/clojure-quant/trateg/app/demo/creds.edn"))}

         ocean-deploy {:doc "builds digital-ocean image and deploys it"
                       :task (do (println "builing/deploying digital-ocean image..")
                                 (guix/guix "deploy"
                                            "./machine/ocean.scm"
                                            "--verbosity=3"
                                            "--no-grafts"))}

         ocean-reconfigure-user (guix/system "ocean-image"
                                             "reconfigure")

         ocean-reconfigure  {:doc "reconfigures guix os on machine ocean (runs as sudo)"
                             :task (do (guix/sudo "ocean-reconfigure-user")
                                       (guix/guix "system" "describe"))}

         ocean-home-configure (guix/guix "home" "reconfigure" "./home/config-ocean.scm"  "--verbosity=3")

         ocean-install-manifest {:doc "installs ocean user packages"
                                 :task (guix/package "ocean"
                                                     "--verbosity=3"
                                                     "--no-grafts")}

         ; ROCK-PRO

         rock-build {:doc "builds an image for pine/rock-pro"

                     ; build-rock (guix/system "image" "rock1")
                     ; when this image is booted execute bash /etc/static/boostrap.sh
                     :task (guix/image "rock-min"
                                       "--image-type=rock64-raw"
                                      ; "--system=aarch64-linux"  ; via qemu (slow, but works)
                                       "--target=aarch64-linux-gnu" ; cross-compilation for TRIPLET
                                       "--image-size=16G" ; use up most of the volume
                                       "--cores=6"
                                       ;"--no-grafts"
                                       )}

        ; guix system image -t rock64-raw --system=aarch64-linux -e "(@ (gnu system install) rockpro64-installation-os)"
        ; https://github.com/SystemCrafters/guix-installer
        ; https://github.com/ofosos/guix-packer
         rock-build-installer {:doc "builds guix installer-image for pine/rock-pro"
                               :task (guix/guix "system" "image"
                                               ; "--no-grafts"
                                                "--image-type=rock64-raw"
                                                "--system=aarch64-linux"
                                        ; "--target=aarch64-linux" ; cross-compilation via qemu
                                                "--target=aarch64-linux-gnu" ; cross-compilation via qemu
                                                "-e" "(@ (gnu system install) rockpro64-installation-os)")}

         ;; PINE PHONE
         ; https://othacehe.org/distributing-guix-system-pinebook-pro-images.html
         ; guix system disk-image --system=armhf-linux -e "(@ (gnu system install) beaglebone-black-installation-os)"
         pine-build-installer (guix/guix "system" "image"
                                         "--system=aarch64-linux"
                                ;"--target=aarch64-linux-gnu"
                                         "--image-type=pine64-raw"
                                ;"--no-grafts"
                                         "-e" "(@ (gnu system install) pine64-plus-installation-os)")

         ; https://github.com/Schroedinger50PCT/guix-pinephone
         ; Der linux-libre-arm64-generic kernel bootet aber gibt keinen Display output.
         ; image --image-type=pine64-raw my-pine-os.scm
         pine-build (guix/image "pinephone"
                                ;"--system=aarch64-linux"
                                "--target=aarch64-linux-gnu"
                                "--image-type=pine64-raw"
                                ;"--no-grafts"
                                )

         pine-build-chromium (guix/image "pinephone-chromium"
                                        ;"--system=aarch64-linux"
                                         "--target=aarch64-linux-gnu"
                                      ;  "--image-type=pine64-raw"
                                        ;"--no-grafts"
                                         )

         ; pinebook pro
         ; https://github.com/Schroedinger50PCT/guix-pinebook-pro/blob/main/pbp.scm

         ; nonfree
         ; https://github.com/aartaka/guix-config/blob/master/nonfree-desktop.scm
         ; https://willschenk.com/articles/2019/installing_guix_on_nuc/


         ; environment (guix/guix "environment")
         environment-openjdk-11 (guix/guix "environment" "--ad-hoc" "openjdk@11")

         ; show
         guix-describe-system (guix/guix "system" "describe")
         guix-generations-system (guix/guix "system" "list-generations")
         show-channels-root (guix/sudo "describe")
         show-manifest-root (shell "cat" "/home/florian/.config/guix/current/manifest")
         show-image-types (guix/guix "system" "--list-image-types")
         mcron-schedule-system (shell "sudo" "herd" "schedule" "mcron" "10")



        ; size

       ; guix size $(guix system build os.scm)
         size-desktop {:doc "size of desktop"
                       :task (do (println "guix size desktop..")
                                 (guix/guix "size" (guix/guix "system" "build" "./machine/nuc.scm")))}

         graph-clojure (guix/graph "clojure") ; this does not work yet.

         graph-nuc (guix/guix "graph"
                              "-e" "(@ (awb99 ptest) graph-packages))") ; this does not work yet.



         syncthing-tunnel {:doc "creates syncthing webadmin tunnel (for nas/syncthing config)"
                           :task (do (println "starting syncthing tunnel..")
                                     (println "syncting local webadmin: localhost:9090")
                                     ;(shell "ssh" "-L" "9090:127.0.0.1:8384" "florian@192.168.1.116")
                                     (shell "ssh" "-N" "-L" "9090:127.0.0.1:8384" "florian@192.168.178.25"))}


         ; ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -p 10022 localhost
         ; The -p tells ssh the port you want to connect to. 
         ; -o UserKnownHostsFile=/dev/null prevents ssh from complaining every time you modify your config.scm file and 
         ; -o StrictHostKeyChecking=no prevents you from having to allow a connection to an unknown host every time you connect.
         ssh-vm-local {:doc "ssh into locally running vm"
                       :task (do (println "")
                                 (println "syncting local webadmin: localhost:9090")
                                     ;(shell "ssh" "-L" "9090:127.0.0.1:8384" "florian@192.168.1.116")
                                 (shell "ssh" "-N" "-L" "9090:127.0.0.1:8384" "florian@192.168.178.25"))}

         guix-repl   {:doc "start guix repl, with module load path: ./modules"
                      :task (guix/guix "repl")}
         guix-repl-test  {:doc "start guix repl, load ./modules/awb99/test.scm"
                          :task (guix/guix "repl" "./modules/awb99/test.scm")}

         guix-repl-ocean (guix/guix "repl"
                                    "./machine/ocean-image.scm")

        ; MANIFEST - USER PROFILE
         guix-describe-user (guix/guix "describe")
         guix-generations-user (guix/guix "profile" "list-generations")
         show-manifest (shell "cat" "/home/florian/.config/guix/current/manifest")
         export-manifest (guix/guix "package" "--export-manifest")
         mcron-schedule-user (shell "herd" "schedule" "mcron" "10")

         user-install {:doc "installs packages to user profile. param: manifest."
                       :task (let [profile (first *command-line-args*)]
                               (println "installing profile: " profile)
                               (guix/guix
                                "package"
                                (str "--manifest=./manifest/" profile ".scm")
                                "--verbosity=3"
                                "--no-grafts"))}

         ; MANIFEST / PROFILE / EXTRA PROFILES

         ;testing (println "cli args: " *command-line-args*)

         profile-list (shell "guix" "package" "--list-profiles")

         profile-weather {:doc "substitute availability for extra profile"
                          :task (let [;profile "emacs2"
                                      profile (first *command-line-args*)]
                                  (guix/guix "weather" "--display-missing"
                                       ; "-coverage"
                                             (str "--manifest=./manifest/" profile ".scm")))}

         profile-install {:doc "installs packages for extra-profile"
                          :task (let [home (System/getenv "HOME")
                                      extra-profiles-dir (str home "/.guix-extra-profiles/")
                                      profile (first *command-line-args*)
                                      profile-dir (str extra-profiles-dir profile)
                                      activate-profile (str profile-dir "/" profile "/etc/profile")]
                                  (println "installing profile: " profile "to: " profile-dir)
                                  (shell "mkdir" "-p" extra-profiles-dir)
                                  (shell "mkdir" "-p" profile-dir)
                                  (guix/guix
                                   "package"
                                   (str "--manifest=./manifest/" profile ".scm")
                                   (str "--profile=" profile-dir "/" profile)
                                   "--verbosity=3"
                                   "--no-grafts")
                                  ;~/.guix-extra-profiles/desktop/desktop/etc/profile
                                  (println "activating: " activate-profile)
                                  (shell "bash" activate-profile))}

         profile-remove {:doc "removes packages from extra-profile"
                         :task (let [home (System/getenv "HOME")
                                     extra-profiles-dir (str home "/.guix-extra-profiles/")
                                     profile (first *command-line-args*)]
                                 (shell "rm" "-r" (str extra-profiles-dir profile)))}

         profile-op {:doc "guix extra-profile operation"
                     :task (let [profile (first *command-line-args*)
                                 operation (last *command-line-args*)]
                             (guix/extra-profile-op profile operation)
                              ;"--list-generations"
                             )}

         profile-gc {;:depends [profile-op]
                     :task (let [profile (first *command-line-args*)]
                             (guix/extra-profile-op profile "--list-generations"))}

         profiles-history {:task (guix/user-profiles-op  "--list-generations")}
         profiles-gc {:task (guix/user-profiles-op  "--delete-generations")}
         profiles-upgrade {:task (guix/user-profiles-op  "--upgrade")}


         ; HOME 
         home-configure  (let [profile (first *command-line-args*)]
                           (println "installing home profile: " profile)
                           (guix/guix
                            "home"
                            "reconfigure"
                            "--verbosity=3"
                            (str "./home/profile/" profile ".scm")))

         home-history {:task (do (println "PROFILE: *HOME*")
                                 (guix/guix "home" "list-generations"))}
         home-gc {:task (guix/guix "home" "delete-generations")}

         gc-roots {:task (guix/guix "gc" "--list-roots")}

         ; profiles
         ; florian-profile
         ; florian-extra-profiles: programming cli desktop
         ; florian-home
         ; root-profile
         ; system

         history-all {:depends [home-history profiles-history]
                      :task (do
                              (home-history)
                              (profiles-history)
                              (tasks/shell "sudo" "bb" "gc-roots") ;sudo guix gc --list-roots
                              )}



        ; TESTING ... 

        ; a 1 
        ; b {:depends [a]    ; bb run --prn b          this tests return values of tasks
        ;    :task (inc a)}

         weather-mc (shell "guix" "weather" "mc")

         size-clojure {:doc "size of clojure"
                       :task (do (println "guix size clojure..")
                                 (guix/guix "size" "clojure"))}
 ;
         }}
